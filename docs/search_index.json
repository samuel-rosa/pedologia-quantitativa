[
["gestao-de-dados-e-codigo-fonte.html", "Cap√≠tulo 6 Gest√£o de Dados e C√≥digo Fonte 6.1 Introdu√ß√£o 6.2 Bases de Dados do Solo 6.3 Gerenciamento de C√≥digo Fonte 6.4 Documenta√ß√£o e Publica√ß√£o", " Cap√≠tulo 6 Gest√£o de Dados e C√≥digo Fonte Aten√ß√£o! Este cap√≠tulo est√° em fase de desenvolvimento. Visite a [p√°gina do projeto][issues] se tiver alguma sugest√£o, d√∫vida ou estiver disposto a colaborar. Sua opini√£o/ajuda √© muito importante! 6.1 Introdu√ß√£o Um importante passo consiste na cria√ß√£o do nosso diret√≥rio de trabalho. Para isso, acesse seu gerenciador de diret√≥rios e crie a seguinte estrutura de diret√≥rios em seu local favorito de trabalho: projeto |- code/ # qualquer c√≥digo de programa√ß√£o | |- R/ # c√≥digo de programa√ß√£o em R | |- data | |- grid/ # dados matriciais | |- R/ # dados no formato *.rda | |- vector/ # dados vetoriais | |- doc/ # arquivos usados para redigir o relat√≥rio | |- fig/ # figuras usadas no relat√≥rio Note que, dentro do nosso diret√≥rio de trabalho principal (projeto) existem tr√™s subdiret√≥rios: code, data e doc. O primeiro deles, code, serve para armazenarmos os arquivos contendo c√≥digo de programa√ß√£o em qualquer linguagem. Para cada linguagem criamos um subsubdiret√≥rio espec√≠fico. Nesse exemplo, como usaremos apenas o R, criaremos apenas um subsubdiret√≥rio chamado R. Ali dentro ser√£o armazenados os scripts com c√≥digo de programa√ß√£o do escritos em R. O segundo subdiret√≥rio ser√° utilizado para armazenarmos os dados usados no projeto. Nesse exemplo, s√£o tr√™s os tipos de dados que utilizaremos, cada um armazenado em um subsubdiret√≥rio espec√≠fico. No subsubdiret√≥rio grid ficar√£o armazenados os dados matriciais, ou seja, os dados das covari√°veis e os resultados das predi√ß√µes espaciais. J√° no subsubdiret√≥rio vector ficar√£o armazenados os dados vetoriais, ou seja, aqueles cuja forma de representa√ß√£o espacial pode ser a de pontos, linhas e pol√≠gonos. Isso inclui os dados de solo e dos limites da √°rea de estudo. Por fim, o subsubdiret√≥rio R ser√° usado para armazenar dados diversos produzidos durante o processamento no R, os quais ser√£o salvos usando o formato rda. O terceiro e √∫ltimo subdiret√≥rio de nosso diret√≥rio de trabalho projeto, aqui denominado doc, ser√° usado para armazenar os arquivos usados para redigir os documentos resultantes do projeto. No RStudio, acesse Arquivo &gt; Novo projeto &gt; Diret√≥rio existente e navegue at√© o diret√≥rio rec√©m criado projeto. Clique em Criar projeto. Toda a estrutura de diret√≥rios criada recentemente aparecer√° no painel direito inferior do RStudio. Agora crie um novo arquivo do R e salve-o no diret√≥rio bigdata &gt; code &gt; R. Ser√° nesse arquivo que voc√™ organizar√° o c√≥digo em R usado para o processamento dos dados. A cria√ß√£o de um projeto no RStudio facilita a organiza√ß√£o dos dados. Sempre que uma rotina de an√°lises for desenvolvida no R √© preciso definir o diret√≥rio de trabalho. O diret√≥rio de trabalho constitui a pasta em que est√£o localizados os arquivos contendo os dados a serem analisados. Al√©m disso, √© no diret√≥rio de trabalho que o R salva o hist√≥rico de trabalho contendo todas as opera√ß√µes realizadas. Inicie o QGIS e acesse Projeto &gt; Novo &gt; Salvar como e navegue at√© o diret√≥rio projeto. Nomeie o projeto como projeto. Assim como para o RStudio, a cria√ß√£o de um projeto no QGIS facilita a organiza√ß√£o dos dados. 6.2 Bases de Dados do Solo 6.2.1 Perfis do Solo CENA-USP: Digital soil properties database of the Amazon part from the RADAMBRASIL project ftp://fapespclima.ccst.inpe.br/lba/ornlworking/carbon_dynamics/CD/CD-208/CD208_RADAMBRASIL_Soils/ Esalq-USP: A national soil profile database for Brazil available to international scientists http://www.esalq.usp.br/gerd/ EMBRAPA: Sistema de Informa√ß√£o de Solos Brasileiros https://www.bdsolos.cnptia.embrapa.br/consulta_publica.html ISRIC: World Soil Information Service (WoSIS) http://www.isric.org/data/wosis NASA: Large-Scale Biosphere-Atmosphere Experiment in Amazonia https://daac.ornl.gov/LBA/lba.shtml 6.2.2 Mapas do Solo EMBRAPA: GeoPortal Digital http://mapoteca.cnps.embrapa.br/ ISRIC: SoilGrids https://soilgrids.org/ 6.3 Gerenciamento de C√≥digo Fonte 6.3.1 git O controle de vers√£o √© uma pr√°tica de fundamental import√¢ncia para o gerenciamento ao longo do tempo de arquivos em geral, dentre eles arquivos contendo c√≥digo fonte. Um sistema de controle de vers√£o registra todas as mudan√ßa feitas no c√≥digo fonte. Assim, quando cometemos algum erro ou desenvolvemos o c√≥digo fonte em uma dire√ß√£o que mais tarde se mostra equivocada, podemos olhar para as vers√µes anteriores do c√≥digo fonte at√© encontrarmos o ponto em que erramos ou o momento no qual tomamos aquela dire√ß√£o equivocada. Basta ent√£o recuperar aquela vers√£o do c√≥digo fonte e continuar o seu desenvolvimento dali em diante. A estrat√©gia de controle de vers√£o mais comumente usada consiste em manter uma estrutura de arquivos mais ou menos com a seguinte: meu-novo-projeto/ |- code/ | |- script01.R | |- script01-modificado.R | |- script02.R | |- script02-revisado.R | |- script02-revisado-novo.R | |- script-final.R | |- script-final-final.R Segundo a estrat√©gia acima, cada arquivo √© nomeado de acordo com o est√°gio de desenvolvimento e fazendo uma refer√™ncia generalista ao tipo de altera√ß√£o feita. Isso pode ser eficiente quando fazemos poucas altera√ß√µes ou ent√£o altera√ß√µes pouco significativas. Contudo, √† medida que aumenta a complexidade de nosso projeto, maior ser√° o n√∫mero de edi√ß√µes no c√≥digo fonte e, tamb√©m, maior ser√° a complexidade delas. Felizmente existem alternativas bastante mais eficientes do que aquela mostrada acima. Na verdade, um bom sistema de controle de vers√£o dar√° conta do registro e organiza√ß√£o das diferentes vers√µes do c√≥digo fonte de maneira completamente autom√°tica. Um dos sistemas mais populares de gerenciamento e controle de vers√£o de c√≥digo fonte √© o git. Comparado aos outros sistemas de controle de vers√£o, uma das grandes vantagens do git √© o fato de ser de f√°cil instala√ß√£o e poder ser utilizado localmente, sem necessidade de conex√£o permanente a um servidor remoto. Isso √© poss√≠vel porque o git realiza todas as opera√ß√µes de gerenciamento do c√≥digo fonte localmente. Basta submeter (em ingl√™s, commit) ao git toda e qualquer edi√ß√£o importante, associando √† ela uma mensagem descritiva. Al√©m da import√¢ncia para o uso pessoal, essa funcionalidade tamb√©m √© muito importante quando temos acesso limitado ou intermitente ao reposit√≥rio remoto onde publicamos e compartilhamos o c√≥digo fonte (por exemplo, por limitada conex√£o √† Internet). Outra importante funcionalidade do git ‚Äì comparado aos demais sistemas de controle de vers√£o ‚Äì √© a capacidade de gerenciar diferentes ‚Äúramos‚Äù (em ingl√™s, branches) de desenvolvimento do c√≥digo fonte. Assim, h√° sempre um ramo principal, com a vers√£o mais est√°vel do c√≥digo fonte, e ramos secund√°rios com os quais podemos fazer testes diversos, tudo isso sem tocar na vers√£o est√°vel do c√≥digo fonte. Caso os resultados de um ramo de desenvolvimento do c√≥digo fonte se mostrarem interessantes e julgarmos que vale a pena adicion√°-los √† vers√£o est√°vel do c√≥digo fonte, basta fazer a fus√£o (em ingl√™s, merge) dos dois ramos ‚Äì ou simplesmente deletar o ramo de teste caso seus resultados se mostrem in√∫teis. Na pr√°tica, isso elimina a necessidade de cria√ß√£o de diferentes arquivos, tanto quando trabalhamos sozinhos, como quando trabalhamos em grupo. Passemos ent√£o √† instala√ß√£o e uso do git! Para verificar se voc√™ j√° tem o git instalado em seu computador, acesse o Terminal ‚Äì painel esquerdo inferior do RStudio ‚Äì e emita as linhas de comando abaixo conforme o seu sistema operacional: # Verifica√ß√£o da instala√ß√£o do git which git # Linux &amp; Mac where git # Windows git --version Se o git estiver instalado, o primeiro comando (which git, em Linux e Mac, ou where git, em Windows) dever√° retornar o caminho para o diret√≥rio onde os arquivos do git est√£o localizados ‚Äì por exemplo, /usr/bin/git ‚Äì, enquanto o segundo comando mostra a vers√£o do git que est√° instalada ‚Äì por exemplo, git version 2.7.4. Caso voc√™ n√£o tenha o git instalado em seu computador, v√° at√© o endere√ßo https://git-scm.com/downloads e descarregue o instalador e estude as diretrizes de instala√ß√£o para o seu sistema operacional. Depois de instalado o git, precisamos fazer a sua configura√ß√£o. Trata-se de informar seu nome e endere√ßo de e-mail para o git. Isso √© necess√°rio porque o git registra esses dados √† cada edi√ß√£o submetida ao controle de vers√£o. Apesar da pequena utilidade quando trabalhamos sozinhos, essa pr√°tica √© da maior import√¢ncia quando duas ou mais pessoas colaboram na edi√ß√£o do c√≥digo fonte, permitindo identificar quem fez cada altera√ß√£o. Para configurar o seu nome e endere√ßo de e-mail no git, acesse o Terminal ‚Äì painel esquerdo inferior do RStudio ‚Äì e emita as duas linhas de comando abaixo substituindo com seus dados os campos pertinentes: # Configura√ß√£o do git git config --global user.name &#39;Seu Nome aqui&#39; git config --global user.email &#39;seu@email.aqui&#39; A maneira mais f√°cil de utilizar o git para o gerenciamento e controle de vers√£o do c√≥digo fonte ‚Äì e demais dados e documentos ‚Äì que produzimos em nossos projetos √© via RStudio. Para isso, ao criar um novo projeto no RStudio usando um novo diret√≥rio (Files &gt; New Project &gt; New Directory &gt; New Project), devemos habilitar a op√ß√£o Create a git repository: Figure 6.1: Novo projeto do RStudio usando git para controle de vers√£o. O diret√≥rio do novo projeto do RStudio dever√° conter uma estrutura com a mostrada abaixo: (Pode ser preciso habilitar a visualiza√ß√£o de arquivos ocultos em seu gerenciador de arquivos üòâ) meu-novo-projeto/ |- .git/ |- .Rproj.user/ |- meu-novo-projeto.Rproj |- .gitignore Tando o subdiret√≥rio .Rproj.user como o arquivo meu-novo-projeto.Rproj j√° foram descritos anteriormente. O que temos de novidade aqui s√£o o subdiret√≥rio .git e o arquivo .gitignore. O subdiret√≥rio .git consiste no reposit√≥rio local onde as edi√ß√µes submetidas ao git s√£o registradas. J√° o arquivo .gitignore serve para identificar os arquivos e subdiret√≥rios que devem ser, como o pr√≥prio nome sugere, ignorados pelo git. √â o caso, por exemplo, de um subdiret√≥rio tempor√°rio criado para armazenar produtos do projeto que podem mudar a cada instante e serem descartados a qualquer momento. Agora, no Terminal, emita o comando git status para acessar as informa√ß√µes sobre o estado atual do git: # Verifica√ß√£o do estado atual do git git status O resultado impresso no terminal deve ser aproximadamente o seguinte: On branch master Initial commit Untracked files: (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed) .gitignore meu-novo-projeto.Rproj nothing added to commit but untracked files present (use &quot;git add&quot; to track) A primeira informa√ß√£o √© de que estamos operando no ramo master do git. Ademais, temos a informa√ß√£o de que existem dois arquivos n√£o monitorados pelo git: .gitignore e meu-novo-projeto.Rproj. Para iniciar o monitoramento desses arquivos, acessamos a aba Git no painel superior direito to RStudio e habilitamos as caixas sob o item Staged, o que far√° o s√≠mbolo sob o item Status passar de um sinal de interrogo√ß√£o amarelo para um A verde (adicionar, do ingl√™s add). Figure 6.2: Adicionando arquivos ao monitoramento do git. Em seguida acessamos o item Commit e, na janela que abrir, inserirmos uma mensagem (Commit message) descrevendo o tipo de edi√ß√£o feita no projeto. Nesse caso, a edi√ß√£o consistiu na cria√ß√£o de um novo projeto do RStudio usando git para controle de vers√£o (Figura 6.3). Figure 6.3: Submiss√£o de edi√ß√£o ao git. Para criar um novo ramo usamos o comando git branch: git branch teste O comando acima criou um ramo chamado teste. Agora precisamos informar o git que as pr√≥ximas edi√ß√µes feita no c√≥digo fonte sejam registradas no ramo teste. Para mudarmos para o novo ramo usamos o comando git checkout: git checkout teste Ou, alternativamente, podemos usar a op√ß√£o -b com o comando git checkout para criar e mudar para o novo ramo de uma s√≥ vez: git checkout -b teste Se emitirmos novamente o comando git status, veremos que estamos, de fato, trabalhando no ramo teste. A partir de agora todas as edi√ß√µes s√£o registradas no ramo teste. Suponha, por exemplo, que dentre as edi√ß√µes feitas est√° a cria√ß√£o de um arquivo chamado teste.txt. Nesse caso, precisamos adicionar o novo arquivo ao √≠ndice do git. Para isso usamo o comando git add: git add teste.txt Tamb√©m precisamos registrar no git uma mensagem que descreva minimamente nossa a√ß√£o. Para isso usamos o comando git commit: git commit -m &#39;Cria√ß√£o do novo arquivo teste.txt contendo informa√ß√µes sobre o teste&#39; Enquanto fazemos essas edi√ß√µes no ramo teste, o ramo master continua exatamente como o deixamos quando criamos e mudamos para o ramo teste. Suponha que agora queremos fundir as edi√ß√µes feitas no ramo teste com aquelas feitas no ramo master. Para isso precisaos primeiro mudar para o ramo master: git checkout master Para fundir o ramo teste com o ramo master usamos o comando git merge: git merge teste Caso tenhamos terminado o desenvolvimento no ramo teste e n√£o voltaremos mais a usar aquele ramos, podemos delet√°-lo. Para isso usamos a op√ß√£o -d com o comando git branch: git branch -d teste 6.3.2 GitHub O GitHub √© uma das plataformas mais populares para hospedagem de c√≥digo fonte, sobretudo entre os usu√°rios e desenvolvedores de pacotes para o R. Acesse a p√°gina do GitHub no endere√ßo abaixo para criar sua conta: https://github.com/ 6.4 Documenta√ß√£o e Publica√ß√£o 6.4.1 Programa√ß√£o letrada Linguagem de marca√ß√£o Markdown do R Cadernos de anota√ß√µes. 6.4.2 Plataformas de publica√ß√£o O Hugo, um programa de computador gratuito e de c√≥digo aberto, √© um dos geradores de p√°ginas est√°ticas da Internet mais populares. Um gerador de p√°ginas est√°ticas consiste num programa que recebe arquivos de texto plano (Markdown) como entrada e os processa de maneira a produzir arquivos no formato HTML. Esses arquivos no formato HTML finalmente v√£o compor o conte√∫do essencial da p√°gina da Internet. Qualquer pessoa que acessar uma p√°gina est√°tica receber√°, em seu computador, exatamente o mesmo conte√∫do. Isso √© completamente diferente das p√°ginas com conte√∫do din√¢mico (Figure 6.4), as quais podem enviar conte√∫dos diferentes para as pessoas que a estiverem acessando dependendo de condi√ß√µes espec√≠ficas. Por exemplo, uma p√°gina que exige o cadastro do visitante enviar√° conte√∫do relacionado √†quele visitante. Para que isso ocorra, as p√°ginas din√¢micas dependem de uma base de dados e uma linguagem como PHP no servidor para realizar algum processamento antes de enviar o conte√∫do da p√°gina ao seu visitante. Numa p√°gina est√°tica, o conte√∫do n√£o fica armazenado em uma base de dados, e sim em arquivos HTML prontos para servir armazenados num servidor qualquer. Assim, as p√°ginas est√°ticas costumam ser mais r√°pidas em responder √†s a√ß√µes dos visitantes. Elas tamb√©m s√£o mais f√°ceis de implementar e manter, uma vez que n√£o dependem de servidores especializados ou a instala√ß√£o de programas espec√≠ficos para gerenciamento de conte√∫do. Figure 6.4: P√°gina din√¢mica da Universidade Federal de Santa Maria. Existem in√∫meros geradores de p√°ginas est√°ticas da Internet. O Hugo se destaca entre eles por ser de f√°cil instala√ß√£o e conter nenhuma ou pouqu√≠ssimas depend√™ncias (dependendo do sistema operacional). O Hugo tamb√©m √© bastante r√°pido na gera√ß√£o das p√°ginas e relativamente f√°cil de configurar se comparado aos demais geradores de p√°ginas est√°ticas existentes. Al√©m disso, o Hugo possui uma comunidade de usu√°rios bastante ativa, o que facilita as coisas quando precisamos resolver alguma d√∫vida. Essa atividade reflete no n√∫mero de temas ‚Äì cole√ß√£o de arquivos de modelos e recursos opcionais (CSS e JavaScript) que definem o aspecto visual da p√°gina quando publicada ‚Äì dispon√≠veis para instala√ß√£o. Visite o endere√ßo abaixo para ver as instru√ß√µes sobre como instalar a √∫ltima vers√£o do Hugo: https://gohugo.io/getting-started/installing/ Ou, alternativamente, descarregue o instalador para o seu OS do seguinte endere√ßo: https://github.com/gohugoio/hugo/releases A principal defici√™ncia do Hugo ‚Äì para usu√°rios do R ‚Äì √© a falta de suporte para a implementa√ß√£o do Markdown para o R. Isso significa que, na implementa√ß√£o nativa do Hugo, n√£o √© nada f√°cil gerar resultados (figuras, tabelas) usando c√≥digo do R. Al√©m disso, o Hugo n√£o usa o Pandoc como motor de convers√£o de Markdown em HTML. Foi exatamente para sanar essas duas defici√™ncias que o engenheiro de software do RStudio Yihui Xie criou o pacote do R blogdown. # Instala√ß√£o da √∫ltima vers√£o do pacote blogdown e depend√™ncias devtools::install_github(&quot;rstudio/blogdown&quot;, dependencies = TRUE) Projetos de constru√ß√£o de p√°ginas da Internet usando Hugo e blogdown podem ser facilmente gerenciados usando o RStudio. Para criar um projeto, v√° at√© File &gt; new Project &gt; New Directory e escolha Website using blogdown (Figura 6.5). Figure 6.5: Cria√ß√£o de novo projeto de p√°gina da Internet usando blogdown no RStudio. A pr√≥xima caixa de di√°logo traz op√ß√µes para definir o nome do novo diret√≥rio e a sua localiza√ß√£o no sistema de arquivos de seu computador (Figura 6.6). Como voc√™ j√° instalou o Hugo, desabilite a op√ß√£o Install Hugo automatically. Escolha o tema do Hugo indicando o nome do respectivo reposit√≥rio no GitHub. (Recomendo usar o tema acad√™mico gcushen/hugo-academic üòÉ) Figure 6.6: Escolha do diret√≥rio do projeto e tema da p√°gina da Internet usando blogdown no RStudio. "]
]
